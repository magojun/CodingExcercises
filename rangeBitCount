/*
You are given two numbers a and b where 0 ≤ a ≤ b. Imagine you construct an array of all the integers from a to b inclusive. You need to count the number of 1s in the binary representations of all the numbers in the array.

Example

For a = 2 and b = 7, the output should be
rangeBitCount(a, b) = 11.

Given a = 2 and b = 7 the array is: [2, 3, 4, 5, 6, 7]. Converting the numbers to binary, we get [10, 11, 100, 101, 110, 111], which contains 1 + 2 + 1 + 2 + 2 + 3 = 11 1s.
*/

int rangeBitCount(int a, int b) {
 int amountOfOnes = 0;
 
 for (int i=b; i >= a;i--)
 {
    amountOfOnes += addTwoDigits(Convert.ToInt32(Convert.ToString(i & -1, 2)));
 }
 
 return amountOfOnes;
}

  
int addTwoDigits(int n) {
    if(n/10==0)
        return n;
    return n%10 + addTwoDigits(n/10);
}









int rangeBitCountBestAnswer(int a, int b) {

    int total = 0;
    for (int i = a; i <= b; i++)
    {
        int number = i;
        while (number != 0)
        {
            if ((number&1) == 1)
                total++;
            number >>= 1;
        }
            
    }
    
    return total;
}
